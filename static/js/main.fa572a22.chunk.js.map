{"version":3,"sources":["Complete.js","App.js","serviceWorker.js","index.js","ToDoList.jpg"],"names":["Complete","state","taskCompleted","complete","_this","setState","react_default","a","createElement","onClick","this","className","props","list","Component","App","input","changeItem","event","text","target","value","addNewItem","newArray","preventDefault","push","deleteAllItems","delArray","splice","map","item","src_Complete","class","src","img","onSubmit","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"wOAsCeA,mNA/BbC,MAAQ,CACNC,cAAc,WAGhBC,SAAW,WACwB,UAA7BC,EAAKH,MAAMC,cACbE,EAAKC,SAAS,CAACH,cAAe,eAG9BE,EAAKC,SAAS,CAACH,cAAe,mFAKhC,OAGII,EAAAC,EAAAC,cAAA,MAAIC,QAASC,KAAKP,SACpBQ,UAAWD,KAAKT,MAAMC,eACtBI,EAAAC,EAAAC,cAAA,WACCE,KAAKE,MAAMC,MAGZP,EAAAC,EAAAC,cAAA,iDAzBiBM,8BCwFRC,6MAtFbd,MAAQ,CACNe,MAAM,GACNH,KAAK,MAINI,WAAW,SAACC,GAEV,IAAMC,EAAOD,EAAME,OAAOC,MAE1BjB,EAAKC,SAAS,CACdW,MAAOG,OAITG,WAAY,SAACJ,GACX,IAAIK,EAAWnB,EAAKH,MAAMY,KAE1BK,EAAMM,iBAEND,EAASE,KAAKrB,EAAKH,MAAMe,OAEzBZ,EAAKC,SAAS,CACZQ,KAAKU,EACLP,MAAM,QAIXU,eAAe,WACb,IAAIC,EAAWvB,EAAKH,MAAMY,KAAKe,OAAO,GAErCD,EAASC,OAAOxB,EAAKH,MAAMe,OAE3BZ,EAAKC,SAAS,CACZQ,KAAKc,6EAMR,IAAMd,EAAOH,KAAKT,MAAMY,KAAKgB,IAAI,SAACC,GAChC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,CAAUlB,KAAMiB,MAEzB,OACAxB,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,UAAQwB,MAAM,SACd1B,EAAAC,EAAAC,cAAA,OAAMyB,IAAKC,OAGX5B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMG,UAAU,QAAhB,mCACAL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,QAAhB,mBAEAL,EAAAC,EAAAC,cAAA,QAAM2B,SAAUzB,KAAKY,YACrBhB,EAAAC,EAAAC,cAAA,2BAECF,EAAAC,EAAAC,cAAA,SACA4B,SAAU1B,KAAKO,WACfI,MAAOX,KAAKT,MAAMe,QAElBV,EAAAC,EAAAC,cAAA,UACCK,GAIDP,EAAAC,EAAAC,cAACuB,EAAD,OAKAzB,EAAAC,EAAAC,cAAA,UAAQG,UAAU,WACjBF,QAASC,KAAKgB,gBADf,yBAxEWZ,aCMEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,sDEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.fa572a22.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\n\nclass Complete extends Component {\n\n  state = {\n    taskCompleted:'false'\n  }\n \n  complete = () => {\n    if (this.state.taskCompleted === 'false'){\n      this.setState({taskCompleted: 'compeleted'})\n \n    } else  {\n      this.setState({taskCompleted: 'false'})\n    }\n  }\n\n  render() {\n    return (\n   \n      \n        <li onClick={this.complete} \n      className={this.state.taskCompleted}> \n      <div>\n      {this.props.list} \n      </div>\n     \n      <h3>click on item when you done</h3>\n      </li>\n\n    \n    );\n  }\n}\n\nexport default Complete;","import React, { Component } from 'react';\nimport './App.css';\nimport Complete from './Complete'\nimport img from './ToDoList.jpg'\n\n\nclass App extends Component {\n  state = {\n    input:'',\n    list:[]\n     \n   }\n \n   changeItem=(event)=>{\n     // get the value that the user typed\n     const text = event.target.value;\n      // update the state with the new update\n     this.setState({\n     input: text\n    });\n   }\n \n   addNewItem =(event) =>{\n     let newArray = this.state.list;\n     // prevent the form refreshing the page\n     event.preventDefault()\n     // add the new item to the array\n     newArray.push(this.state.input);\n     // update the state with our new items\n     this.setState({\n       list:newArray,\n       input:''\n     })\n   }\n   \n  deleteAllItems=() =>{\n    let delArray = this.state.list.splice(0);\n    // delete the itemes \n     delArray.splice(this.state.input);\n    // update the state with our new items\n     this.setState({\n       list:delArray\n     })\n    \n  }\n  \n  render() {\n    const list = this.state.list.map((item)=> {\n      return <Complete list={item}/>\n    })\n    return (\n    <div>\n  \n      <figure class=\"swing\">\n      <img  src={img} />\n      </figure>\n\n      <div>\n      <span className=\"txt1\">Every choice you make makes you</span>\n      <span className=\"txt2\">JOHN C. MAXWELL</span>\n         \n      <form onSubmit={this.addNewItem}>\n      <label>To Do List</label>\n        \n       <input \n       onChange={this.changeItem} \n       value={this.state.input}> \n       </input>\n       <ul>\n       {list}\n       </ul>\n       \n      \n       <Complete />\n       \n       </form>\n\n       \n       <button className='btn btn1'\n        onClick={this.deleteAllItems}>Delete Items</button>\n       </div>\n       \n\n       </div>\n\n      \n    );\n  }\n\n  \n  }\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ToDoList.cdb3976c.jpg\";"],"sourceRoot":""}